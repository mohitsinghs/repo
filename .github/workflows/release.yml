name: release
on:
  release:
    types:
      - created

jobs:
  build-release:
    name: build-release
    runs-on: ${{ matrix.os }}
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build:
          - linux glib x64
          - linux musl x64
          - macos x64
          - win-msvc x64
        include:
          - build: linux glib x64
            os: ubuntu-18.04
            rust: stable
            target: x86_64-unknown-linux-gnu
          - build: linux musl x64
            os: ubuntu-18.04
            rust: stable
            target: x86_64-unknown-linux-musl
          - build: macos x64
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          - build: win-msvc x64
            os: windows-2019
            rust: stable
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Install musl-tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get install -y --no-install-recommends musl-tools

      - name: Build release binary
        run: cargo build --verbose --release --target ${{ matrix.target }}

      - name: Strip release binary (unix)
        if: matrix.os != 'windows-2019'
        run: strip "target/${{ matrix.target }}/release/repo"

      - name: Tar release (unix)
        if: matrix.os != 'windows-2019'
        working-directory: ./target/${{ matrix.target }}/release
        run: tar cvfz repo-v${{ github.event.release.tag_name }}-${{matrix.target}}.tar.gz "repo"

      - name: Zip Windows release
        if: matrix.os == 'windows-2019'
        working-directory: ./target/${{ matrix.target }}/release
        run: tar.exe -a -c -f repo-v${{ github.event.release.tag_name }}-${{matrix.target}}.zip "repo.exe"

      - name: Upload release archive (linux)
        if: matrix.os != 'windows-2019'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/repo-v${{ github.event.release.tag_name }}-${{matrix.target}}.tar.gz
          asset_name: repo-v${{ github.event.release.tag_name }}-${{matrix.target}}.tar.gz
          asset_content_type: application/octet-stream

      - name: Upload Windows release archive
        if: matrix.os == 'windows-2019'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/repo-v${{ github.event.release.tag_name }}-${{matrix.target}}.zip
          asset_name: repo-v${{ github.event.release.tag_name }}-${{matrix.target}}.zip
          asset_content_type: application/octet-stream
